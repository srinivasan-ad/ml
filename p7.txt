wget -O - https://get.sdkman.io | bash
source "$HOME/.sdkman/bin/sdkman-init.sh" 
 sdk install maven 
sdk install gradle
mvn archetype:generate -DgroupId=com.example -DartifactId=MyMavenApp -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
nano pom.xml
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example</groupId>
  <artifactId>MyMavenApp</artifactId>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>MyMavenApp</name>
  <url>http://maven.apache.org</url>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
<build>
  <plugins>
    <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-compiler-plugin</artifactId>
      <version>3.10.1</version>
      <configuration>
        <source>17</source>
        <target>17</target>
      </configuration>
    </plugin>
  </plugins>
</build>
</project>
mvn compile
mvn test
mvn package

java -cp target/MyMavenApp-1.0-SNAPSHOT.jar com.example.Ap


wget -O - https://get.sdkman.io | bash
source "$HOME/.sdkman/bin/sdkman-init.sh" 
mkdir helloGradle
cd helloGradle 
gradle init --type java-application
kts folder
task hello {
    doLast {
        println 'Hello, Gradle!'
    }
}

./gradlew clean
./gradlew build
./gradlew run
./gradlew hello


for groovy rename build.kts remove kts and same for settings.kts

then in build pase this 
plugins {
    id 'application'
}

dependencies {
    implementation libs.guava
    testImplementation libs.junit.jupiter
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

application {
    mainClass = 'org.example.App'
}

tasks.register('hello') {
    doLast {
        println 'Hello, Gradle!'
    }
}



mkdir -p ~/mvntest/HelloMavenGradle/app/src/main/java/com/example
mkdir -p ~/mvntest/HelloMavenGradle/app/src/test/java/com/example

cp ~/mvntest/MyMavenApp/src/main/java/com/example/App.java ~/mvntest/HelloMavenGradle/app/src/main/java/com/example/
cp ~/mvntest/MyMavenApp/src/test/java/com/example/AppTest.java ~/mvntest/HelloMavenGradle/app/src/test/java/com/example/
./gradlew clean build
./gradlew run


script
#!/bin/bash

# Part A: Maven Project
echo "=== Creating Maven project ==="
mvn archetype:generate -DgroupId=com.example -DartifactId=HelloMaven \
  -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false

cd HelloMaven
echo "=== Building Maven project ==="
mvn package

echo "=== Running Maven app ==="
java -cp target/HelloMaven-1.0-SNAPSHOT.jar com.example.App

cd ..

# Part B: Gradle Project
echo "=== Creating Gradle project ==="
mkdir HelloMavenGradle
cd HelloMavenGradle
gradle init --type java-application --dsl groovy --test-framework junit --project-name HelloMavenGradle --package com.example --no-split-project

echo "=== Setting up Gradle project structure ==="
mkdir -p src/main/java/com/example
mkdir -p src/test/java/com/example

echo "=== Copying source files ==="
cp ../HelloMaven/src/main/java/com/example/App.java src/main/java/com/example/
cp ../HelloMaven/src/test/java/com/example/AppTest.java src/test/java/com/example/

echo "=== Updating build.gradle ==="
sed -i '/application {/a \ \ \ \ mainClass = "com.example.App"' build.gradle

echo "=== Building Gradle project ==="
gradle build

echo "=== Running Gradle app ==="
gradle run
