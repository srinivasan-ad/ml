Step 1: Prepare your Gradle project for Jenkins
Make sure you have these files:

build.gradle — your Gradle build script

gradlew and gradlew.bat — Gradle wrapper scripts (optional but recommended, so Jenkins can build without installing Gradle globally)

Jenkinsfile — pipeline definition file

Step 2: Sample Jenkinsfile
Create a file named Jenkinsfile in your project root with this minimal pipeline:

pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                // Checkout your Git repo
                checkout scm
            }
        }

        stage('Build') {
            steps {
                // Use Gradle wrapper to build
                sh './gradlew clean build'
            }
        }

        stage('Test') {
            steps {
                // Run tests
                sh './gradlew test'
            }
        }
    }

    post {
        always {
            // Archive test results (optional)
            junit '**/build/test-results/test/*.xml'
        }
    }
}

Step 3: Push your project to a Git repository
Initialize Git in your project folder if not done:

bash
Copy
Edit
git init
git add .
git commit -m "Initial commit"
Push to GitHub or another Git service:

bash
Copy
Edit
git remote add origin https://github.com/yourusername/yourrepo.git
git push -u origin master
Step 4: Create Jenkins job
Open Jenkins in your browser.

Click New Item, name it, choose Pipeline.

Under Pipeline section, select Pipeline script from SCM.

Choose Git, and enter your repo URL.

Set branch (e.g., master or main).

Jenkins will look for Jenkinsfile in the root.

Save and run the job.

Step 5: Watch your pipeline run!
Jenkins will:

Clone your repo

Run ./gradlew clean build (build + compile)

Run ./gradlew test (execute tests)

