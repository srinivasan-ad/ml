# 1. Create a Jenkins Job

sudo wget -O - /etc/apt/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
echo "deb [signed-by=/etc/apt/keyrings/jenkins-keyring.asc]" \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install jenkins
sudo apt install openjdk-21-jdk

sudo update-alternatives --config java

 sudo systemctl restart jenkins\nsudo systemctl status jenkins\n 
 sudo cat /var/lib/jenkins/secrets/initialAdminPassword\n 
- Open Jenkins at http://localhost:8080
- Click “New Item”
- Name it: Gradle-CI
- Select “Freestyle project” → Click OK
In gradle build file 
tasks.register("hello")
{
    doLast{
        println "Hello from Gradle"
    }
}
test {
    testLogging {
        events "passed", "skipped", "failed"
    }
}
test {
    useJUnit() // Optional, for clarity with JUnit 4
    reports {
        junitXml.required = true
        html.required = true
    }
}

# 2. Configure Source Code Management
- In job config → “Source Code Management” → Select “Git”
- Enter your repo URL (e.g. https://github.com/yourusername/your-gradle-project.git)
- Branch Specifier: */main (or whichever)

# 3. Add Build Step (Gradle)
- Scroll to “Build” → “Add build step” → “Invoke Gradle script”
- Tasks: clean build

# 4. Post-build Actions
- “Add post-build action” → “Publish JUnit test result report”
- Test Report XMLs: app/build/test-results/test/*.xml

# 5. Save & Run
- Click “Save”
- Go to job → Click “Build Now”
- Click build number → View “Console Output” to check logs

# 6. Jenkinsfile Pipeline (optional alternative)

# File: Jenkinsfile (place this in your GitHub repo root)

pipeline {
  agent any
  stages {
    stage('Checkout') {
      steps {
        git url: 'https://github.com/srinivasan-ad/jenkins.git', branch: 'main'
      }
    }
    stage('Build') {
      steps {
        sh './gradlew clean build'
      }
    }
    stage('Test') {
      steps {
        sh './gradlew test'
      }
    }
  }
  post {
    always {
      junit 'app/build/test-results/test/*.xml'
    }
    success {
      echo 'Build and tests succeeded!'
    }
    failure {
      echo 'Build or tests failed.'
    }
  }
}

# Jenkins Dashboard → New Item → “Pipeline” → Paste this in the Pipeline script section
# Save → Build Now
